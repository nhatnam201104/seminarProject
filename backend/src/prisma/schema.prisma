// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  phone     String    @db.VarChar(10)
  username  String    @db.VarChar(50)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Task      Task[]
  Expense   Expense[]
}

model Task {
  id          Int           @id @default(autoincrement())
  user_id     Int
  user        User          @relation(fields: [user_id], references: [id])
  title       String        @db.VarChar(50)
  description String?
  repeat      Boolean       @default(false)
  hour        Int
  minute      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Task_detail Task_detail[]
}

model Task_detail {
  id      Int  @id @default(autoincrement())
  task_id Int
  task    Task @relation(fields: [task_id], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
}

model Expense {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
